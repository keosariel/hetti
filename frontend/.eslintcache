[{"/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/index.js":"1","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/reportWebVitals.js":"2","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/App.js":"3","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/pages/home/index.jsx":"4","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/components/deposit.jsx":"5","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/components/withdraw.jsx":"6","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/components/header.jsx":"7","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/lib/AltBn128.js":"8","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/gateway.js":"9"},{"size":535,"mtime":1670054938650,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1670054938655,"results":"12","hashOfConfig":"11"},{"size":446,"mtime":1670097686524,"results":"13","hashOfConfig":"11"},{"size":2284,"mtime":1670139445828,"results":"14","hashOfConfig":"11"},{"size":6973,"mtime":1670145298199,"results":"15","hashOfConfig":"11"},{"size":7862,"mtime":1670149333335,"results":"16","hashOfConfig":"11"},{"size":3276,"mtime":1670144270116,"results":"17","hashOfConfig":"11"},{"size":7245,"mtime":1670102117550,"results":"18","hashOfConfig":"11"},{"size":455,"mtime":1670149261891,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"v2jki1",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/index.js",[],["40","41"],"/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/reportWebVitals.js",[],"/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/App.js",[],"/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/pages/home/index.jsx",[],"/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/components/deposit.jsx",["42","43","44","45","46","47","48","49","50"],"import React, { useState, useEffect } from 'react';\nimport contracts from '../gateway';\nimport { ethers } from \"ethers\";\nimport { serialize, h1, bn128 } from '../lib/AltBn128';\nimport crypto from 'crypto';\n\nconst Deposit = ({ hettiFactory, setMsg, tokenRef }) => {\n\n    const [tokens, setTokens] = useState([]);\n    const [amount, setAmount] = useState(1);\n    const [token, setToken] = useState(null);\n    const [hettiToken, setHettiToken] = useState(null);\n    const [busy, setBusy] = useState(false);\n\n    if(hettiFactory !== null) {\n        hettiFactory.allPoolsLength().then((length) => {\n            length = length.toNumber();\n            for(var i=0; i<length; i++) {\n                hettiFactory.allPools(i).then((pool) => {\n                    var pc = new ethers.Contract(\n                        pool,\n                        contracts.hettiPool.abi,\n                        hettiFactory.signer\n                    )\n\n                    pc.token().then((token) => {\n                        var tc = new ethers.Contract(\n                            token,\n                            contracts.ERC20.abi,\n                            hettiFactory.signer\n                        );\n\n                        tc.symbol().then((symbol) => {\n                            var d = {symbol: symbol, address: token, pool: pool};\n                            for(var i=0; i<tokens.length; i++) {\n                                if(tokens[i].address === token) {\n                                    return;\n                                }\n                            }\n                            setTokens([...tokens, d]);\n                            if(tokens.length === 0) {\n                                setToken(d);\n                            }else{\n                                setToken(tokens[0]);\n                            }\n                        });\n\n                    });\n\n                });\n            }\n        });\n    }\n\n    const deposit = async () => {\n        if(token) {\n            setMsg({});\n            setBusy(true);\n            var Pool = new ethers.Contract(\n                token.pool,\n                contracts.hettiPool.abi,\n                hettiFactory.signer\n            );\n            \n            var Token = new ethers.Contract(\n                token.address,\n                contracts.ERC20.abi,\n                hettiFactory.signer\n            );\n\n            const amountToken = ethers.utils.parseUnits(amount.toString(), 18).toHexString();\n                \n            const targetAddress = '';\n            const randomSecretKey = crypto.randomBytes(32).toString('hex')\n            const stealthSecretKey = h1(\n                serialize([randomSecretKey, targetAddress])\n            )\n            \n            const stealthPublicKey = bn128.ecMulG(stealthSecretKey).map(x => '0x' + x.toString(16))\n            \n            const ringIndex = await Pool.getCurrentRingIndex(amountToken);\n            const hettiToken = {\n                randomSecretKey: randomSecretKey,\n                amount: amountToken,\n                ringIndex: ringIndex.toHexString()\n            };\n\n            try {\n                let gasEstimate = Token.estimateGas.approve(token.pool, amountToken);\n\n                await Token.approve(token.pool, amountToken, {gasLimit: gasEstimate});\n\n                gasEstimate = await Pool.estimateGas.deposit(\n                    amountToken,\n                    stealthPublicKey\n                )\n                \n                let tx = await Pool.deposit(\n                    amountToken,\n                    stealthPublicKey,\n                    {gasLimit: gasEstimate}\n                );\n                \n                const receipt = await tx.wait();\n                if(receipt.status === 1) {\n                    tokenRef.current.value = `hetti:${hettiToken.amount}:${hettiToken.ringIndex}:${token.pool}:${hettiToken.randomSecretKey}`;\n                    document.getElementById(\"deposit-dialog\").setAttribute(\"open\", \"\");\n                    setMsg({text: \"Deposit successful\", color: \"lightgreen\"});\n                }else{\n                    setMsg({text: \"Deposit failed\", color: \"pink\"});\n                }\n            } catch (error) {\n                console.log(error.message);\n                setMsg({text: \"Deposit failed\", color: \"pink\"});\n            }\n            setBusy(false);\n        }\n    }\n    \n    return (\n        <>\n            <label htmlFor=\"default_select\">Token</label>\n            <div className=\"nes-select is-dark\">\n                <select required id=\"default_select\">\n                    {tokens.map((token) => {\n                        return <option key={0} value={token.pool}>{token.symbol}</option>\n                    })}\n                </select>\n            </div>\n            \n            <div className=\"default-amounts\">\n                { token ? (\n                    <>\n                        <p>Amount</p>\n\n                        <div className='amounts'>\n                            <a href=\"#\" className=\"nes-badge\" onClick={() => setAmount(1)}>\n                                <span className=\"is-success\">1 {token.symbol}</span>\n                            </a>\n                            <a href=\"#\" className=\"nes-badge\" onClick={() => setAmount(2)}>\n                                <span className=\"is-success\">2 {token.symbol}</span>\n                            </a>\n                            <a href=\"#\" className=\"nes-badge\" onClick={() => setAmount(4)}>\n                                <span className=\"is-success\">4 {token.symbol}</span>\n                            </a>\n                        </div>\n                        <div className='amounts'>\n                            <a href=\"#\" className=\"nes-badge\" onClick={() => setAmount(8)}>\n                                <span className=\"is-success\">8 {token.symbol}</span>\n                            </a>\n                            <a href=\"#\" className=\"nes-badge\" onClick={() => setAmount(16)}>\n                                <span className=\"is-success\">16 {token.symbol}</span>\n                            </a>\n                            <a href=\"#\" className=\"nes-badge\" onClick={() => setAmount(32)}>\n                                <span className=\"is-success\">32 {token.symbol}</span>\n                            </a>\n                        </div>\n                    </>\n                ) : (\n                    <p>Loading...</p>\n                )}\n            </div>\n            \n            <br/>\n            <br/>\n            <button type=\"button\" className={[\"nes-btn is-success\", busy? \"is-disabled\" : \"\"].join(\" \")} onClick={deposit} >\n                {\n                    busy ? (\n                        'Depositing...'\n                    ) : (\n                        amount > 0 && token != null ? `Deposit ${amount} ${token.symbol}` : `Deposit`\n                    )\n                }\n            </button>\n        </>\n    )\n}\n\nexport default Deposit;","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/components/withdraw.jsx",["51","52","53"],"/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/components/header.jsx",[],"/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/lib/AltBn128.js",[],"/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/gateway.js",["54"],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":27,"nodeType":"61","messageId":"62","endLine":1,"endColumn":36},{"ruleId":"59","severity":1,"message":"63","line":12,"column":12,"nodeType":"61","messageId":"62","endLine":12,"endColumn":22},{"ruleId":"59","severity":1,"message":"64","line":12,"column":24,"nodeType":"61","messageId":"62","endLine":12,"endColumn":37},{"ruleId":"65","severity":1,"message":"66","line":137,"column":29,"nodeType":"67","endLine":137,"endColumn":92},{"ruleId":"65","severity":1,"message":"66","line":140,"column":29,"nodeType":"67","endLine":140,"endColumn":92},{"ruleId":"65","severity":1,"message":"66","line":143,"column":29,"nodeType":"67","endLine":143,"endColumn":92},{"ruleId":"65","severity":1,"message":"66","line":148,"column":29,"nodeType":"67","endLine":148,"endColumn":92},{"ruleId":"65","severity":1,"message":"66","line":151,"column":29,"nodeType":"67","endLine":151,"endColumn":93},{"ruleId":"65","severity":1,"message":"66","line":154,"column":29,"nodeType":"67","endLine":154,"endColumn":93},{"ruleId":"59","severity":1,"message":"68","line":4,"column":10,"nodeType":"61","messageId":"62","endLine":4,"endColumn":16},{"ruleId":"59","severity":1,"message":"69","line":4,"column":18,"nodeType":"61","messageId":"62","endLine":4,"endColumn":23},{"ruleId":"70","severity":1,"message":"71","line":29,"column":25,"nodeType":"72","messageId":"73","endLine":29,"endColumn":27},{"ruleId":"59","severity":1,"message":"74","line":1,"column":10,"nodeType":"61","messageId":"62","endLine":1,"endColumn":16},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'hettiToken' is assigned a value but never used.","'setHettiToken' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Scalar' is defined but never used.","'Point' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'ethers' is defined but never used.","no-global-assign","no-unsafe-negation"]