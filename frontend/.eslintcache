[{"/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/index.js":"1","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/reportWebVitals.js":"2","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/App.js":"3","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/pages/home/index.jsx":"4","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/components/deposit.jsx":"5","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/components/withdraw.jsx":"6","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/components/header.jsx":"7","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/lib/AltBn128.js":"8","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/gateway.js":"9","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/components/footer.jsx":"10"},{"size":535,"mtime":1670054938650,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1670054938655,"results":"13","hashOfConfig":"12"},{"size":446,"mtime":1670097686524,"results":"14","hashOfConfig":"12"},{"size":2493,"mtime":1670155705784,"results":"15","hashOfConfig":"12"},{"size":6973,"mtime":1670145298199,"results":"16","hashOfConfig":"12"},{"size":7862,"mtime":1670149333335,"results":"17","hashOfConfig":"12"},{"size":3276,"mtime":1670154941113,"results":"18","hashOfConfig":"12"},{"size":7245,"mtime":1670102117550,"results":"19","hashOfConfig":"12"},{"size":455,"mtime":1670149261891,"results":"20","hashOfConfig":"12"},{"size":357,"mtime":1670155573104,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"v2jki1",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/index.js",[],["46","47"],"/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/reportWebVitals.js",[],"/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/App.js",[],"/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/pages/home/index.jsx",[],"/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/components/deposit.jsx",["48","49","50","51","52","53","54","55","56"],"import React, { useState, useEffect } from 'react';\nimport contracts from '../gateway';\nimport { ethers } from \"ethers\";\nimport { serialize, h1, bn128 } from '../lib/AltBn128';\nimport crypto from 'crypto';\n\nconst Deposit = ({ hettiFactory, setMsg, tokenRef }) => {\n\n    const [tokens, setTokens] = useState([]);\n    const [amount, setAmount] = useState(1);\n    const [token, setToken] = useState(null);\n    const [hettiToken, setHettiToken] = useState(null);\n    const [busy, setBusy] = useState(false);\n\n    if(hettiFactory !== null) {\n        hettiFactory.allPoolsLength().then((length) => {\n            length = length.toNumber();\n            for(var i=0; i<length; i++) {\n                hettiFactory.allPools(i).then((pool) => {\n                    var pc = new ethers.Contract(\n                        pool,\n                        contracts.hettiPool.abi,\n                        hettiFactory.signer\n                    )\n\n                    pc.token().then((token) => {\n                        var tc = new ethers.Contract(\n                            token,\n                            contracts.ERC20.abi,\n                            hettiFactory.signer\n                        );\n\n                        tc.symbol().then((symbol) => {\n                            var d = {symbol: symbol, address: token, pool: pool};\n                            for(var i=0; i<tokens.length; i++) {\n                                if(tokens[i].address === token) {\n                                    return;\n                                }\n                            }\n                            setTokens([...tokens, d]);\n                            if(tokens.length === 0) {\n                                setToken(d);\n                            }else{\n                                setToken(tokens[0]);\n                            }\n                        });\n\n                    });\n\n                });\n            }\n        });\n    }\n\n    const deposit = async () => {\n        if(token) {\n            setMsg({});\n            setBusy(true);\n            var Pool = new ethers.Contract(\n                token.pool,\n                contracts.hettiPool.abi,\n                hettiFactory.signer\n            );\n            \n            var Token = new ethers.Contract(\n                token.address,\n                contracts.ERC20.abi,\n                hettiFactory.signer\n            );\n\n            const amountToken = ethers.utils.parseUnits(amount.toString(), 18).toHexString();\n                \n            const targetAddress = '';\n            const randomSecretKey = crypto.randomBytes(32).toString('hex')\n            const stealthSecretKey = h1(\n                serialize([randomSecretKey, targetAddress])\n            )\n            \n            const stealthPublicKey = bn128.ecMulG(stealthSecretKey).map(x => '0x' + x.toString(16))\n            \n            const ringIndex = await Pool.getCurrentRingIndex(amountToken);\n            const hettiToken = {\n                randomSecretKey: randomSecretKey,\n                amount: amountToken,\n                ringIndex: ringIndex.toHexString()\n            };\n\n            try {\n                let gasEstimate = Token.estimateGas.approve(token.pool, amountToken);\n\n                await Token.approve(token.pool, amountToken, {gasLimit: gasEstimate});\n\n                gasEstimate = await Pool.estimateGas.deposit(\n                    amountToken,\n                    stealthPublicKey\n                )\n                \n                let tx = await Pool.deposit(\n                    amountToken,\n                    stealthPublicKey,\n                    {gasLimit: gasEstimate}\n                );\n                \n                const receipt = await tx.wait();\n                if(receipt.status === 1) {\n                    tokenRef.current.value = `hetti:${hettiToken.amount}:${hettiToken.ringIndex}:${token.pool}:${hettiToken.randomSecretKey}`;\n                    document.getElementById(\"deposit-dialog\").setAttribute(\"open\", \"\");\n                    setMsg({text: \"Deposit successful\", color: \"lightgreen\"});\n                }else{\n                    setMsg({text: \"Deposit failed\", color: \"pink\"});\n                }\n            } catch (error) {\n                console.log(error.message);\n                setMsg({text: \"Deposit failed\", color: \"pink\"});\n            }\n            setBusy(false);\n        }\n    }\n    \n    return (\n        <>\n            <label htmlFor=\"default_select\">Token</label>\n            <div className=\"nes-select is-dark\">\n                <select required id=\"default_select\">\n                    {tokens.map((token) => {\n                        return <option key={0} value={token.pool}>{token.symbol}</option>\n                    })}\n                </select>\n            </div>\n            \n            <div className=\"default-amounts\">\n                { token ? (\n                    <>\n                        <p>Amount</p>\n\n                        <div className='amounts'>\n                            <a href=\"#\" className=\"nes-badge\" onClick={() => setAmount(1)}>\n                                <span className=\"is-success\">1 {token.symbol}</span>\n                            </a>\n                            <a href=\"#\" className=\"nes-badge\" onClick={() => setAmount(2)}>\n                                <span className=\"is-success\">2 {token.symbol}</span>\n                            </a>\n                            <a href=\"#\" className=\"nes-badge\" onClick={() => setAmount(4)}>\n                                <span className=\"is-success\">4 {token.symbol}</span>\n                            </a>\n                        </div>\n                        <div className='amounts'>\n                            <a href=\"#\" className=\"nes-badge\" onClick={() => setAmount(8)}>\n                                <span className=\"is-success\">8 {token.symbol}</span>\n                            </a>\n                            <a href=\"#\" className=\"nes-badge\" onClick={() => setAmount(16)}>\n                                <span className=\"is-success\">16 {token.symbol}</span>\n                            </a>\n                            <a href=\"#\" className=\"nes-badge\" onClick={() => setAmount(32)}>\n                                <span className=\"is-success\">32 {token.symbol}</span>\n                            </a>\n                        </div>\n                    </>\n                ) : (\n                    <p>Loading...</p>\n                )}\n            </div>\n            \n            <br/>\n            <br/>\n            <button type=\"button\" className={[\"nes-btn is-success\", busy? \"is-disabled\" : \"\"].join(\" \")} onClick={deposit} >\n                {\n                    busy ? (\n                        'Depositing...'\n                    ) : (\n                        amount > 0 && token != null ? `Deposit ${amount} ${token.symbol}` : `Deposit`\n                    )\n                }\n            </button>\n        </>\n    )\n}\n\nexport default Deposit;","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/components/withdraw.jsx",["57","58","59"],"import React, { useState, useRef } from 'react'\nimport { ethers } from \"ethers\";\nimport contracts from '../gateway';\nimport { Scalar, Point, serialize, h1, bn128 } from '../lib/AltBn128'\nimport BN from 'bn.js'\n\nconst zeroHexify = (value) => {\n    if (value.indexOf('0x') !== 0) {\n        value = '0x' + value\n    }\n    return value\n}\n\nconst Withdraw = ({ hettiFactory, setMsg }) => {\n    \n    const [ringData, setRingData] = useState(null);\n    const [withdrawData, setWithdrawData] = useState(null);\n    const tokenRef = useRef(null);\n    const recipientRef = useRef(null);\n    const [wPool, setPool] = useState(null);\n    const [busy, setBusy] = useState(false);\n\n    const getData = async () => {\n        let tokenData = tokenRef.current.value;\n        let tData = tokenData.split(\":\");\n\n        \n\n        if(tData.length != 5) {\n            setMsg({color: \"pink\", text: \"Invalid token data\"});\n            setRingData(null);\n            return;\n        }else{\n            setMsg({});\n        }\n\n        setRingData({});\n\n        let tAmount = tData[1];\n        let rIndex = parseInt(tData[2]);\n        let tPool = tData[3];\n\n        let pool = new ethers.Contract(tPool, contracts.hettiPool.abi, hettiFactory.signer);\n        setPool(pool);\n        \n        let tSecretKey = tData[4];\n        let tokenDecimal = await pool.tokenDecimal;\n        let ring = await pool.rings(tAmount, rIndex);\n        let packedData = ring[1];\n\n        let participants = await pool.getParticipant(packedData);\n\n        var tc = new ethers.Contract(\n            await pool.token(),\n            contracts.ERC20.abi,\n            hettiFactory.signer\n        );\n\n        let symbol = await tc.symbol();\n        let status = \"Closed\";\n\n        let ringHash = await pool.getRingHash(tAmount, rIndex);\n\n        if(ringHash === \"0x0000000000000000000000000000000000000000000000000000000000000000\") {\n            setMsg({color: \"pink\", text: \"Ring isn't open\"});\n            status = \"Open\";\n        }\n\n        setWithdrawData({\n            ringHash: ringHash,\n            tokenAmount: tAmount,\n            ringIndex: rIndex,\n            secret: tSecretKey,\n        })\n\n        let rData = {\n            token: symbol,\n            amount: ethers.utils.formatUnits(tAmount, tokenDecimal),\n            status: status,\n            participants: parseInt(participants._hex),\n            ringId: rIndex\n        }\n\n        setRingData(rData);\n        setMsg({});\n    };  \n\n    const withdraw = async () => {\n        setMsg({});\n        setBusy(true);\n\n        let recipient = recipientRef.current.value;\n\n        if(!recipient) {\n            setMsg({color: \"pink\", text: \"Recipient address is required\"});\n            return;\n        }\n\n        if(withdrawData === null || wPool === null) {\n            setMsg({color: \"pink\", text: \"Invalid token data\"});\n            return;\n        }\n\n        const publicKeys = await wPool.getPublicKeys(\n            withdrawData.tokenAmount, withdrawData.ringIndex\n        );  \n\n        const bnZero = new BN('0', 10);\n\n        const publicKeysBN = publicKeys.map(x => {\n              return [\n                new BN(Buffer.from(x[0].slice(2), 'hex')),\n                new BN(Buffer.from(x[1].slice(2), 'hex'))\n              ]\n        }).filter(x => x[0].cmp(bnZero) !== 0 && x[1].cmp(bnZero) !== 0)\n\n        const stealthSecretKey = h1(\n            serialize([withdrawData.secret, ''])\n        )\n        \n        const stealthPublicKey = bn128.ecMulG(stealthSecretKey);\n        console.log(\"0x\" + stealthPublicKey[0].toString(16));\n        console.log(publicKeys);\n\n        let secretIdx = 0\n        let canSign = false\n\n        for (let i = 0; i < publicKeysBN.length; i++) {\n            const curPubKey = publicKeysBN[i]\n\n            if (curPubKey[0].cmp(stealthPublicKey[0]) === 0 && curPubKey[1].cmp(stealthPublicKey[1]) === 0) {\n              secretIdx = i\n              canSign = true\n              break\n            }\n        }\n        \n        if(!canSign) {\n            setMsg({color: \"pink\", text: \"Invalid secret key\"});\n            return;\n        }\n\n        const message = Buffer.concat([\n            Buffer.from(\n                withdrawData.ringHash.slice(2), // Remove the '0x'\n                'hex'\n            ),\n            Buffer.from(\n                recipient.slice(2), // Remove the '0x'\n                'hex'\n            )\n        ]);\n\n        const signature = bn128.ringSign(\n            message,\n            publicKeysBN,\n            stealthSecretKey,\n            secretIdx\n        )\n\n        const c0 = zeroHexify(signature[0].toString(16))\n        const s = signature[1].map(x => zeroHexify(x.toString(16)))\n        const keyImage = [\n            zeroHexify(signature[2][0].toString(16)),\n            zeroHexify(signature[2][1].toString(16))\n        ]\n\n        try{\n            let gasEstimate = await wPool.estimateGas.withdraw(\n                recipient,\n                withdrawData.tokenAmount,\n                zeroHexify(withdrawData.ringIndex.toString(16)),\n                c0,\n                keyImage,\n                s,\n            );\n\n            let tx = await wPool.withdraw(\n                recipient,\n                withdrawData.tokenAmount,\n                zeroHexify(withdrawData.ringIndex.toString(16)),\n                c0,\n                keyImage,\n                s,\n                {gasLimit: gasEstimate}\n            );\n\n            const receipt = await tx.wait();\n            if(receipt.status === 1) {\n                setMsg({text: \"Withdrawal successful\", color: \"lightgreen\"});\n            }else{\n                setMsg({text: \"Withdrawal failed\", color: \"pink\"});\n            }\n        } catch (error) {\n            console.log(error.message);\n            setMsg({text: \"Deposit failed\", color: \"pink\"});\n        }\n        setBusy(false);\n    }\n\n    return (\n        <>\n            <div class=\"nes-field\">\n                <label htmlFor=\"token_field\">Token</label>\n                <input type=\"text\" id=\"token_field\" ref={tokenRef} class=\"nes-input is-dark\" onChange={getData} placeholder='Paste you token here.'/>\n            </div>\n            \n            <div class=\"nes-container with-title is-dark status\">\n                <p class=\"title\">Status</p>\n                {\n                    ringData != null ? (\n                        ringData.status ? (\n                            <div>\n                                <p>Ring status: <span class=\"nes-text is-success\">{ringData.status}</span></p>\n                                <p>No of Participants: <span class=\"nes-text is-success\">{ringData.participants}</span></p>\n                                <p>Ring ID: <span class=\"nes-text is-success\">{ringData.ringId}</span></p>\n                                <p>Amount: <span class=\"nes-text is-success\">{ringData.amount} {ringData.token}</span></p>\n                            </div>\n                        ) : (\n                            <p class=\"nes-text\">Loading...</p>\n                        )\n                    ) : (\n                        <p>input a valid token</p>\n                    )\n                }\n            </div>\n\n            <br/>\n            <div class=\"nes-field\">\n                <label htmlFor=\"token_field\">Recipient Address</label>\n                <input type=\"text\" id=\"token_field\" ref={recipientRef} class=\"nes-input is-dark\" placeholder='Who would recieve the funds?'/>\n            </div>\n            <br/>\n            <br/>\n            <button type=\"button\" onClick={withdraw} className={[\"nes-btn is-success\", withdrawData === null || busy? \"is-disabled\" : \"\" ].join(\" \")}>\n                {\n                    busy ? (\n                        'Withdrawing...'\n                    ) : (\n                        'Withdraw'\n                    )\n                }\n                \n            </button>\n        </>\n    )\n}\n\nexport default Withdraw;","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/components/header.jsx",[],"/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/lib/AltBn128.js",[],"/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/gateway.js",["60"],"import { ethers } from \"ethers\";\nimport HettiFactory from \"./abi/HettiFactory.json\";\nimport HettiPool from \"./abi/HettiPool.json\";\nimport ERC20 from \"./abi/ERC20.json\";\n\n\nconst contracts = {\n    \"hettiFactory\": {\n        \"address\": \"0xa1b4f0788D8a7670f619D0Ff40F66D04CA8e20b6\",\n        \"abi\": HettiFactory['abi']\n    },\n    \"hettiPool\": {\n        \"abi\": HettiPool['abi']\n    },\n    \"ERC20\": {\n        \"abi\": ERC20['abi']\n    }\n}\n\nexport default contracts;","/Users/mac/Desktop/keosariel/polygon-hackathon/hetti/frontend/src/components/footer.jsx",["61"],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":1,"column":27,"nodeType":"68","messageId":"69","endLine":1,"endColumn":36},{"ruleId":"66","severity":1,"message":"70","line":12,"column":12,"nodeType":"68","messageId":"69","endLine":12,"endColumn":22},{"ruleId":"66","severity":1,"message":"71","line":12,"column":24,"nodeType":"68","messageId":"69","endLine":12,"endColumn":37},{"ruleId":"72","severity":1,"message":"73","line":137,"column":29,"nodeType":"74","endLine":137,"endColumn":92},{"ruleId":"72","severity":1,"message":"73","line":140,"column":29,"nodeType":"74","endLine":140,"endColumn":92},{"ruleId":"72","severity":1,"message":"73","line":143,"column":29,"nodeType":"74","endLine":143,"endColumn":92},{"ruleId":"72","severity":1,"message":"73","line":148,"column":29,"nodeType":"74","endLine":148,"endColumn":92},{"ruleId":"72","severity":1,"message":"73","line":151,"column":29,"nodeType":"74","endLine":151,"endColumn":93},{"ruleId":"72","severity":1,"message":"73","line":154,"column":29,"nodeType":"74","endLine":154,"endColumn":93},{"ruleId":"66","severity":1,"message":"75","line":4,"column":10,"nodeType":"68","messageId":"69","endLine":4,"endColumn":16},{"ruleId":"66","severity":1,"message":"76","line":4,"column":18,"nodeType":"68","messageId":"69","endLine":4,"endColumn":23},{"ruleId":"77","severity":1,"message":"78","line":29,"column":25,"nodeType":"79","messageId":"80","endLine":29,"endColumn":27},{"ruleId":"66","severity":1,"message":"81","line":1,"column":10,"nodeType":"68","messageId":"69","endLine":1,"endColumn":16},{"ruleId":"82","severity":1,"message":"83","line":7,"column":80,"nodeType":"74","messageId":"84","endLine":7,"endColumn":136,"fix":"85"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'hettiToken' is assigned a value but never used.","'setHettiToken' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Scalar' is defined but never used.","'Point' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'ethers' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"88","text":"89"},"no-global-assign","no-unsafe-negation",[272,272]," rel=\"noreferrer\""]